package com.guavus.singtel.sender;

import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.nio.ByteBuffer;
import java.util.Calendar;
import java.util.TimeZone;

class TCPWriter
{

    public static Properties propertyFile = new Properties();
    public static String GNGiDataSourceFolderPath;
    public static String GNGiDataOutputFolderPath;
    public static String Port;
    public static String IP;
    public static ByteBuffer inbytes;

    public static void main(String argv[]) throws Exception
    {
        Socket clientSocket = new Socket("192.168.1.214",1022);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        String strDate = "20130816";
        Calendar cln = Calendar.getInstance();
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));        
cln.setTime(sdf.parse(strDate));
        
        int iCount = 0;
	long lnCurrentTime = 0l;
     // System.out.println(PropUtil.getPropertyValue(PropUtil.GnGi_IP)+Integer.valueOf(PropUtil.getPropertyValue(PropUtil.GnGi_Port));
        BufferedOutputStream outToServer = new BufferedOutputStream(clientSocket.getOutputStream());
        
        long starttime = System.currentTimeMillis();
        int i=1;
        byte[] data = new byte[8192];
        byte[] currDate = new byte[8];
        int[] lineFeed = new int[20];
        long iSentBytes = 0;
        long iMBDivisor = (1024 * 1024);
        
        while(iCount<30)
        {
            //FileInputStream fin = new FileInputStream(PropUtil.getPropertyValue(PropUtil.GnGi_INPUT_FILE_PATH));
            //FileInputStream fin = new FileInputStream("/Users/shridhar/Desktop/SingtelDocs/gng5K.txt");///Volumes/D/Singtel/GnGi Sample 12 Jul 2013
            FileInputStream fin = new FileInputStream("/data/Singtel/up_10_252_92_14.2013080520.masked");

            int read = 0;
            int ln=0;
            long cmp = 0l;
            //inbytes = ByteBuffer.wrap(data);

            while ( (read = fin.read(data)) != -1 )
            {
                //lnCurrentTime = System.currentTimeMillis();       
                //currDate = sdf.format(new Date(lnCurrentTime)).getBytes();
		currDate = sdf.format(cln.getTime()).getBytes();

                int iIndex = 0, iDP = 0;
                for(int a=0; a<read; a++){
                    if(data[a] == (byte)((char)10)){
                        lineFeed[iIndex] = a;
                        iIndex++;
                    }
                }                

                //Replace PdpActivation Time
                iIndex = 0;
                if(lineFeed[iIndex] < 483){
                    iDP = lineFeed[iIndex] + 91 + 1;
                    iIndex++;
                }else{
                    iDP = 91;
                }
                while((iDP + 8) < read){
//                            if(data[iDP+1] != (byte)((char)2))
//                                continue;
                    System.arraycopy(currDate, 0, data, iDP, 8);
                    if(lineFeed[iIndex] == 0)
                        break;
                    iDP = lineFeed[iIndex] + 91 + 1;
                    iIndex++;
                }

                //Replace Uplink FlowStart Time
                iIndex = 0;
                if(lineFeed[iIndex] < 483){
                    iDP = lineFeed[iIndex] + 131 + 1;
                    iIndex++;
                }else{
                    iDP = 131;
                }
                while((iDP + 8) < read){
//                            if(data[iDP+1] != (byte)((char)2))
//                                continue;
                    System.arraycopy(currDate, 0, data, iDP, 8);
                    if(lineFeed[iIndex] == 0)
                        break;
                    iDP = lineFeed[iIndex] + 131 + 1;
                    iIndex++;
                }

                //Replace Uplink FlowEnd Time
                iIndex = 0;
                if(lineFeed[iIndex] < 483){
                    iDP = lineFeed[iIndex] + 145 + 1;
                    iIndex++;
                }else{
                    iDP = 145;
                }
                while((iDP + 8) < read){
//                            if(data[iDP+1] != (byte)((char)2))
//                                continue;
                    System.arraycopy(currDate, 0, data, iDP, 8);
                    if(lineFeed[iIndex] == 0)
                        break;
                    iDP = lineFeed[iIndex] + 145 + 1;
                    iIndex++;
                }

                //Replace Downlink FlowStart Time
                iIndex = 0;
                if(lineFeed[iIndex] < 483){
                    iDP = lineFeed[iIndex] + 186 + 1;
                    iIndex++;
                }else{
                    iDP = 186;
                }
                while((iDP + 8) < read){
//                            if(data[iDP+1] != (byte)((char)2))
//                                continue;
                    System.arraycopy(currDate, 0, data, iDP, 8);
                    if(lineFeed[iIndex] == 0)
                        break;
                    iDP = lineFeed[iIndex] + 186 + 1;
                    iIndex++;
                }

                //Replace Downlink FlowEnd Time
                iIndex = 0;
                if(lineFeed[iIndex] < 483){
                    iDP = lineFeed[iIndex] + 200 + 1;
                    iIndex++;
                }else{
                    iDP = 200;
                }
                while((iDP + 8) < read){
//                            if(data[iDP+1] != (byte)((char)2))
//                                continue;
                    System.arraycopy(currDate, 0, data, iDP, 8);
                    if(lineFeed[iIndex] == 0)
                        break;
                    iDP = lineFeed[iIndex] + 200 + 1;
                    iIndex++;
                }
                /*
                //Replace PdpActivation Time
                for(int iDatePos = 91; iDatePos < read; iDatePos += 483){
                    System.arraycopy(currDate, 0, data, iDatePos, 8);
                }

                //Replace Uplink FlowStart Time
                for(int iDatePos = 131; iDatePos < read; iDatePos += 483){
                    System.arraycopy(currDate, 0, data, iDatePos, 8);
                }

                //Replace Uplink FlowEnd Time
                for(int iDatePos = 145; iDatePos < read; iDatePos += 483){
                    System.arraycopy(currDate, 0, data, iDatePos, 8);
                }

                //Replace Downlink FlowStart Time
                for(int iDatePos = 186; iDatePos < read; iDatePos += 483){
                    System.arraycopy(currDate, 0, data, iDatePos, 8);
                }

                //Replace Downlink FlowEnd Time
                for(int iDatePos = 200; iDatePos < read; iDatePos += 483){
                    System.arraycopy(currDate, 0, data, iDatePos, 8);
                }*/                    
                outToServer.write(data,0,read); 

                iSentBytes += read;
                ln++;
                cmp = starttime + (60000*i);
                //System.out.println(cmp+" "+System.currentTimeMillis());
                if(cmp <= System.currentTimeMillis())
                {      	
                    System.out.println("Data Send"+((ln*8192)/(60*1024*1024)));
                    //endTime = System.currentTimeMillis() + 60000;
                    System.out.println(" iSentBytes :" + iSentBytes);
                    System.out.println(" iMBDivisor :" + iMBDivisor);
                    System.out.println("Speed  : " + (iSentBytes / iMBDivisor)/60);
                    iSentBytes = 0;
                    ln=0;
                    i++;
                 
                }

            }
            fin.close();
	    cln.add(Calendar.DATE, 1);
            iCount++;
        }
    
	


        /*try (Socket clientSocket = new Socket(IP, Integer.parseInt(Port)))
        {
            BufferedOutputStream outToServer = new BufferedOutputStream(clientSocket.getOutputStream());
            File sourceDir = new File(GNGiDataSourceFolderPath);
            File[] sourceFiles = sourceDir.listFiles();
            for (int i = 0; i < 10000000000000L; i++)
            {

                for (File sourceFile : sourceFiles)
                {
                    try (FileInputStream fin = new FileInputStream(sourceFile))
                    {
                        byte[] data = new byte[8192];
                        int read = 0;
                        while ((read = fin.read(data)) != -1)
                        {
                            outToServer.write(data, 0, read);
                        }
                    }
                }
            }
        }

    }*/
    
}
}
